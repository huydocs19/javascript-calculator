{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js","Calculator.js"],"names":["App","className","Calculator","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","DIGIT_LIMIT","equals","id","value","numbers","operators","decimal","clear","props","state","displayCharacters","currVal","numOperators","prevCalculation","result","exceedLimit","bind","addCharacter","calculate","isOperator","char","includes","currExpression","i","this","length","push","topCharacter","pop","Math","round","eval","join","Number","EPSILON","setState","error","console","key","setTimeout","newVal","newDisplay","concat","hasDecimal","inputString","displayString","onClick","style","gridArea","map","number","index","operator","Component"],"mappings":"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","file":"static/js/main.9d378a2a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport './App.css';\nimport Calculator from './Calculator';\nfunction App() {\n  return (\n    <div className=\"App\">\n     <Calculator />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import React, { Component } from 'react';\r\n\r\nconst DIGIT_LIMIT = 22;\r\nconst equals = {id: \"equals\", value: \"=\"};\r\nconst numbers = [{id: \"zero\", value: 0}, {id: \"one\", value: 1}, {id: \"two\", value: 2}, {id: \"three\", value: 3}, {id: \"four\", value: 4}, \r\n{id: \"five\", value: 5}, {id: \"six\", value: 6}, {id: \"seven\" , value: 7}, {id: \"eight\" , value: 8}, {id: \"nine\" , value: 9}];\r\nconst operators = [{id: \"add\", value: \"+\"}, {id: \"subtract\", value: \"-\"}, {id: \"multiply\", value: \"x\"}, {id: \"divide\", value: \"/\"}];\r\nconst decimal = {id: \"decimal\", value: \".\"};\r\nconst clear = {id: \"clear\", value: \"AC\"};\r\n\r\nexport default class Calculator extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          displayCharacters: [],\r\n          currVal: [],\r\n          numOperators: 0,\r\n          prevCalculation: [],\r\n          result: [],\r\n          exceedLimit: false\r\n        };\r\n        this.clear  = this.clear.bind(this);\r\n        this.addCharacter = this.addCharacter.bind(this);\r\n        this.calculate = this.calculate.bind(this);\r\n        this.isOperator = this.isOperator.bind(this);\r\n        \r\n      } \r\n      isOperator(char) {\r\n        const operatorList = [\"+\", \"-\", \"x\", \"⋅\", \"/\"];\r\n        return operatorList.includes(char);\r\n      }\r\n      calculate() {\r\n        let currExpression = [];\r\n        for (let i = 0; i < this.state.displayCharacters.length; i++) {\r\n          if (this.state.displayCharacters[i] === \"⋅\") {\r\n            currExpression.push(\"*\");\r\n          } else {\r\n            currExpression.push(this.state.displayCharacters[i]);\r\n          }\r\n        }\r\n        let topCharacter = currExpression[currExpression.length - 1];\r\n        while (currExpression.length > 0 && this.isOperator(topCharacter)) {\r\n          currExpression.pop();\r\n          topCharacter = currExpression[currExpression.length - 1];\r\n        }\r\n        try {\r\n          let result = Math.round((eval(currExpression.join('')) + Number.EPSILON) * 10000) / 10000;\r\n          for (let i = 0; i < currExpression.length; i++) {\r\n            if (currExpression[i] === \"*\") {\r\n              currExpression[i] = \"⋅\";\r\n            } \r\n          } \r\n          currExpression.push('=');\r\n          this.setState({prevCalculation: currExpression, displayCharacters: [], currVal: [], result: [result]});\r\n        } catch (error) {\r\n          console.error(error);  \r\n        }\r\n      }\r\n      \r\n      addCharacter(key) {\r\n        if (this.state.displayCharacters.length >= DIGIT_LIMIT) {\r\n          this.setState({exceedLimit: true});\r\n          setTimeout(() => {this.setState({exceedLimit: false});}, 900);\r\n          return;\r\n        }\r\n        if (key !== 0 || this.state.displayCharacters.length > 0) {\r\n          let newVal = [...this.state.currVal];\r\n          let newDisplay = [...this.state.displayCharacters]; \r\n          \r\n          if (this.isOperator(key)) {\r\n            newVal = [key];\r\n            if (key === 'x') {\r\n              key = '⋅'\r\n            }\r\n            newDisplay = newDisplay.concat(this.state.result);        \r\n            let topCharacter = newDisplay[newDisplay.length - 1];\r\n            if (this.state.numOperators >= 1) {\r\n              if (key === '-') {\r\n                if (topCharacter !== '-') {\r\n                  newDisplay.push(key);\r\n                }\r\n              } else {\r\n                while(newDisplay.length > 0 && this.isOperator(topCharacter)) {\r\n                  newDisplay.pop();\r\n                  topCharacter = newDisplay[newDisplay.length - 1];\r\n                }\r\n                newDisplay.push(key);\r\n              }\r\n            } else {\r\n              newDisplay.push(key);\r\n            }\r\n            this.setState({numOperators: this.state.numOperators + 1});\r\n            \r\n          } else if (key === \".\") {\r\n            let hasDecimal = false;\r\n            if (newVal.length === 0 || this.isOperator(newVal[0])) {\r\n               newVal.push(0);\r\n               newDisplay.push(0);\r\n               newVal.push(key);\r\n               newDisplay.push(key);\r\n            } else {\r\n              for (let i = 0; i < newVal.length; i++) {\r\n                if (newVal[i] === '.') {\r\n                  hasDecimal = true;\r\n                  break;\r\n                }\r\n              \r\n              } \r\n              if (!hasDecimal) {\r\n                newVal.push(key);\r\n                newDisplay.push(key);\r\n              }\r\n            }\r\n            \r\n          } else {\r\n              let topCharacter = newDisplay[newDisplay.length - 1];\r\n              if (this.isOperator(topCharacter)) {\r\n                newVal = [key];\r\n              } else {\r\n                newVal.push(key);\r\n              }\r\n              newDisplay.push(key);\r\n              this.setState({numOperators: 0})\r\n           }\r\n          this.setState({displayCharacters: newDisplay, currVal: newVal, prevCalculation: [], result:[]});\r\n        }\r\n        \r\n      }\r\n      clear() {\r\n        this.setState({prevCalculation: [], displayCharacters: [], currVal: [], result: []})\r\n      }\r\n      render() {\r\n        let inputString = this.state.displayCharacters.length > 0? this.state.displayCharacters.join(''): \r\n                          this.state.prevCalculation.length > 0? this.state.prevCalculation.concat(this.state.result): \r\n                          \" \";\r\n        let displayString = \"\";\r\n        if (!this.state.exceedLimit) {\r\n           displayString = this.state.currVal.length > 0? this.state.currVal.join(''): \r\n                            this.state.result.length > 0?this.state.result.join(''): \r\n                            '0';\r\n        } else  {\r\n          displayString = \"DIGIT LIMIT EXCEED\";\r\n        }\r\n       \r\n        return (\r\n          <div className=\"grid-container\">\r\n            <div id={equals.id} onClick={this.calculate} style={{gridArea: equals.id}}>{equals.value}</div>\r\n            {numbers.map((number, index) => {\r\n                  return <div key={index} id={number.id} className=\"input-button\" onClick={() => this.addCharacter(number.value)} style={{gridArea: number.id}}>{number.value}</div>;\r\n                })}  \r\n            {operators.map((operator, index) => {\r\n                  return <div key={index} id={operator.id} className=\"input-button\" onClick={() => this.addCharacter(operator.value)} style={{gridArea: operator.id}}>{operator.value}</div>;\r\n                })} \r\n            <div id={decimal.id} className=\"input-button\" onClick={() => this.addCharacter(decimal.value)} style={{gridArea: decimal.id}}>{decimal.value}</div>\r\n            <div id={clear.id} className=\"input-button\" onClick={this.clear} style={{gridArea: clear.id}}>{clear.value}</div>\r\n            <div id=\"input\" style={{gridArea: \"input\"}}>{inputString}{}</div>\r\n            <div id=\"display\" style={{gridArea: \"output\"}}>{displayString}</div>            \r\n          </div>\r\n          );\r\n      }\r\n}\r\n\r\n\r\n"],"sourceRoot":""}